#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(ql:quickload '(:psychiq :trivial-signal :alexandria :uiop) :silent t)

(use-package :psychiq.specials)

(defun print-usage ()
  (format *error-output* "~&Usage: psychiq.ros [option...]

Options:
    -o, --host HOST                 Redis server host
    -p, --port PORT                 Redis server port
    -d, --db DBNUM                  Redis server db (default: 0)
    -q, --queue QUEUE[,WEIGHT]      Queues to process with optional weights (several -q's allowed)
    -c, --concurrency INT           Processor threads to use (default: 25)
    -l, --load FILE                 File to load (several -l's allowed)
    -s, --system SYSTEM             ASDF system to load before starting (several -s's allowed)
    -v, --verbose                   Print more verbose output
    -n, --namespace NAMESPACE       Redis namespace (default: \"psychiq\")
    -V, --version                   Print version
    -h, --help                      Show help
")
  (uiop:quit -1))

(defmacro case* ((keyform &key (test #'equal)) &body cases)
  (let ((g-keyform (gensym "KEYFORM"))
        (g-test (gensym "TEST")))
    `(let ((,g-keyform ,keyform)
           (,g-test ,test))
       (cond
         ,@(loop for (case . body) in cases
                 if (eq case 'otherwise)
                   collect `(t ,@body)
                 else
                   collect `((find ,g-keyform ',(if (listp case)
                                                    case
                                                    (list case))
                                   :test ,g-test)
                             ,@body))))))

(defun parse-queue-option (option)
  "Parse --queue option which has an optional weight. (ex: default,10)"
  (let ((comma-pos (position #\, option :from-end t)))
    (if comma-pos
        (values
         (subseq option 0 comma-pos)
         (parse-integer (subseq option (1+ comma-pos))))
        option)))

(defun parse-args (args)
  (let (new-args)
    (flet ((add-option (k v)
             (setf new-args (nconc new-args (list k v)))))
      (loop with queues = (list *default-queue-name*)
            with systems = '()
            with loads = '()
            for option = (pop args)
            while option
            do (case* (option)
                 (("-o" "--host")
                  (add-option :host (pop args)))
                 (("-p" "--port")
                  (add-option :port (parse-integer (pop args))))
                 (("-d" "--db")
                  (add-option :db (parse-integer (pop args))))
                 (("-c" "--concurrency")
                  (add-option :concurrency (parse-integer (pop args))))
                 (("-q" "--queue")
                  (multiple-value-bind (queue weight)
                      (parse-queue-option (pop args))
                    (let ((weight
                            (if (and (integerp weight)
                                     (< 0 weight))
                                weight
                                1)))
                      (dotimes (i weight)
                        (push queue queues)))))
                 (("-l" "--load")
                  (push (pop args) loads))
                 (("-s" "--system")
                  (push (pop args) systems))
                 (("-n" "--namespace")
                  (add-option :namespace (pop args)))
                 (("-v" "--verbose")
                  (vom:config t :debug))
                 (("-V" "--version")
                  (format *error-output*
                          "~&Psychiq ~A~%"
                          (asdf:component-version (asdf:find-system :psychiq)))
                  (uiop:quit -1))
                 (("-h" "--help")
                  (print-usage))
                 (otherwise
                  (warn "Invalid option: ~A" option)
                  (print-usage)))
            finally
               (when queues
                 (add-option :queue (nreverse queues)))
               (when loads
                 (mapc #'load loads))
               (when systems
                 (ql:quickload (nreverse systems)))))
    new-args))

(defmacro with-handle-interrupt (int-handler &body body)
  (let ((main (gensym "MAIN")))
    `(flet ((,main () ,@body))
       #+(or sbcl ccl clisp allegro ecl)
       (handler-case
           (let (#+ccl (ccl:*break-hook* (lambda (condition hook)
                                           (declare (ignore hook))
                                           (error condition))))
             (,main))
         (#+sbcl sb-sys:interactive-interrupt
          #+ccl  ccl:interrupt-signal-condition
          #+clisp system::simple-interrupt-condition
          #+ecl ext:interactive-interrupt
          #+allegro excl:interrupt-signal
          ()
           (funcall ,int-handler)))
       #-(or sbcl ccl clisp allegro ecl)
       (,main))))

(defun main (&rest args)
  (vom:config t :info)
  (let ((args (parse-args args)))
    (format *error-output*
            "~&Starting processing (concurrency=~A) with Redis (~A:~A)...~%"
            (getf args :concurrency 25)
            (getf args :host *default-redis-host*)
            (getf args :port *default-redis-port*))

    (let ((namespace (getf args :namespace)))
      (when namespace
        (setf args (alexandria:delete-from-plist args :namespace))
        (setf *psychiq-namespace* namespace)))

    (let ((launcher (apply #'psychiq.launcher:run args)))
      (flet ((handle-sigint (signo)
               (format *error-output*
                       "~&~A~%"
                       (trivial-signal:signal-name signo))
               (psychiq.launcher:stop launcher))
             (handle-sigterm (signo)
               (format *error-output*
                       "~&~A~%"
                       (trivial-signal:signal-name signo))
               (psychiq.launcher:kill launcher)))
        (setf (trivial-signal:signal-handler :term) #'handle-sigterm)
        (setf (trivial-signal:signal-handler :int)  #'handle-sigint)
        (with-handle-interrupt (lambda () (handle-sigint trivial-signal:+sigint+))
          (psychiq.launcher:wait-for launcher))))))
